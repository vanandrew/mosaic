[project]
name = "warpkit"
description = "A python library for neuroimaging transformations"
readme = "README.md"
requires-python = ">=3.8"
authors = [{ name = "Andrew Van", email = "vanandrew@wustl.edu" }]
keywords = ["neuroimaging"]
classifiers = ["Programming Language :: Python :: 3"]
urls = { github = "https://github.com/vanandrew/warpkit" }
version = "0.1.1"
dynamic = ["scripts"]
dependencies = [
  "nibabel >= 4.0.2",
  "numpy >= 1.23.3",
  "scikit-image >= 0.20.0",
  "scipy >= 1.8.1",
  "transforms3d >= 0.4.1",
  "indexed-gzip >= 1.7.0",
]

[project.optional-dependencies]
dev = [
  "black >= 22.3.0",
  "coverage[toml] >= 5.5",
  "pytest >= 7.2.2",
  "pytest-pycodestyle >= 2.2.0",
  "pybids >= 0.15.1",
  "pre-commit >= 3.6.0",
]

[build-system]
requires = ["setuptools", "wheel", "cmake >= 3.24", "cmake-build-extension >= 0.5.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = true

[tool.setuptools.packages.find]
exclude = ["tests"]

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
command_line = "-m pytest"

[tool.coverage.report]
omit = ["tests/*"]

[tool.pylint.main]
disable = [
  "line-too-long",
  "invalid-name",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "too-many-arguments",
  "too-many-statements",
  "too-many-locals",
  "wildcard-import",
  "unused-argument",
  "unused-wildcard-import",
  "import-outside-toplevel",
  "attribute-defined-outside-init",
  "dangerous-default-value",
]

[tool.cibuildwheel]
skip = "*musllinux*"
build-frontend = "build"
environment = { PATH = "/opt/julia/bin:$PATH" }

[tool.cibuildwheel.linux]
archs = ["x86_64"]
repair-wheel-command = "auditwheel repair --exclude libjulia.so.1 -w {dest_dir} {wheel}"
before-all = [
  "curl -fsSL https://install.julialang.org | sh -s -- --yes --default-channel 1.9.4",
  "mkdir -p /opt/julia/ && cp -r /root/.julia/juliaup/*/* /opt/julia/",
  "echo \"/opt/julia/lib\" >> /etc/ld.so.conf.d/julia.conf && ldconfig",
]

[tool.cibuildwheel.macos]
archs = ["universal2"]
repair-wheel-command = "delocate-wheel --ignore-missing-dependencies --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
before-all = ["brew install julia"]
before-build = ["pip install delocate==0.10.6"]
